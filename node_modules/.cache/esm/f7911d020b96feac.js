let src,dest,parallel,watch,series,plumber,del,pug,browserSync,autoprefixer,sass,uglify,babel,imagemin,cache;_0b9‍.w("gulp",[["src",["src"],function(v){src=v}],["dest",["dest"],function(v){dest=v}],["parallel",["parallel"],function(v){parallel=v}],["watch",["watch"],function(v){watch=v}],["series",["series"],function(v){series=v}]]);_0b9‍.w("gulp-plumber",[["default",["plumber"],function(v){plumber=v}]]);_0b9‍.w("del",[["default",["del"],function(v){del=v}]]);_0b9‍.w("gulp-pug",[["default",["pug"],function(v){pug=v}]]);_0b9‍.w("browser-sync",[["default",["browserSync"],function(v){browserSync=v}]]);_0b9‍.w("gulp-autoprefixer",[["default",["autoprefixer"],function(v){autoprefixer=v}]]);_0b9‍.w("gulp-sass",[["default",["sass"],function(v){sass=v}]]);_0b9‍.w("gulp-uglify",[["default",["uglify"],function(v){uglify=v}]]);_0b9‍.w("gulp-babel",[["default",["babel"],function(v){babel=v}]]);_0b9‍.w("gulp-imagemin",[["default",["imagemin"],function(v){imagemin=v}]]);_0b9‍.w("gulp-cache",[["default",["cache"],function(v){cache=v}]]);











browserSync.create();

const options = {
  pug: {
    src: ["app/views/*.pug", "app/views/!blocks/**", "app/views/!layout/**"],
    all: "app/views/**/*.pug",
    dest: "build",
  },
  styles: {
    src: "app/styles/**/*.scss",
    dest: "build/styles",
  },
  scripts: {
    src: "app/scripts/**/*.js",
    dest: "build/scripts",
  },
  images: {
    src: "app/images/*.+(png|jpeg|jpg|gif|svg)",
    dest: "build/images",
  },
  fonts: {
    src: "app/fonts/*",
    dest: "build/fonts",
  },
};

const browsersync = (done) => {
  browserSync.init({
    server: {
      baseDir: "build",
    },
    port: 4000,
  });
  done();
};

const views = () => {
  return src(options.pug.src)
    .pipe(
      plumber(function (err) {
        console.log("Pug Task Error");
        _0b9‍.g.console.log(err);
        this.emit("end");
      })
    )
    .pipe(pug({ pretty: true }))
    .pipe(dest(options.pug.dest))
    .pipe(browserSync.stream());
};

const styles = () => {
  return src(options.styles.src)
    .pipe(
      plumber(function (err) {
        console.log("Styles Task Error");
        _0b9‍.g.console.log(err);
        this.emit("end");
      })
    )
    .pipe(sass().on("error", sass.logError))
    .pipe(
      autoprefixer({
        browsers: ["last 2 versions"],
        cascade: false,
        grid: true,
        overrideBrowserslist: [""],
      })
    )
    .pipe(dest(options.styles.dest))
    .pipe(browserSync.stream());
};

const scripts = () => {
  return src(options.scripts.src)
    .pipe(
      plumber(function (err) {
        console.log("Scripts Task Error");
        _0b9‍.g.console.log(err);
        this.emit("end");
      })
    )
    .pipe(babel())
    .pipe(uglify())
    .pipe(dest(options.scripts.dest))
    .pipe(browserSync.stream());
};

const images = () => {
  return src(options.images.src)
    .pipe(
      cache(
        imagemin({
          interlaced: true,
        })
      )
    )
    .pipe(gulp.dest(options.images.dest));
};

function fonts() {
  return src(options.fonts.src).pipe(dest(options.fonts.dest));
}

const cleanOldBuildFile = async () => {
  return Promise.resolve(del.sync("public"));
};

const watchFiles = () => {
  watch(options.pug.all, views);
  watch(options.styles.src, styles);
  watch(options.scripts.src, scripts);
};

const buildFile = series(
  cleanOldBuildFile,
  parallel(views, styles, scripts, images, fonts)
);
const watchChange = parallel(watchFiles, browsersync);

exports.views = views;
exports.styles = styles;
exports.scripts = scripts;
exports.images = images;
exports.watch = watchChange;
exports.build = buildFile;
exports.default = buildFile;
